% Generated by roxygen2 (4.0.1): do not edit by hand
\docType{class}
\name{h5MEMDF-class}
\alias{h5MEMDF}
\alias{h5MEMDF-class}
\title{Specification of the h5MEMDF reference class}
\description{
The h5MEMDF class allows the user to create a h5DF object in memory rather than on file.
The data frame chunks are stored in memory and these are accessed by pointers in the h5MEMDF object.
}
\section{Methods}{

\describe{
\item{\code{append(df, ...)}}{The append() method allows the user to append new data to the current h5MEMDF object.
  @param df the data frame or character path to a csv file containing the data frame to
          be appended to the h5MEMDF object
  @param ... arguments to be passed to read.csv()
  Usage:
  $append((data.frame or character) df, (arguments passed to read.csv()) ...)}

\item{\code{createH5DF(filePath)}}{The createH5DF() method writes the memory matrix to file and returns a h5MAT object.
  @param filePath character denoting the path a location where the h5 file can be written.
  Usage:
  $createH5DF((chaaracter) filePath)}

\item{\code{createH5MEMDF(df, chunkSize, ...)}}{The createH5MEMDF() method populates data in memory and the meta data in the h5MEMDF object
@param df a data frame or path to a csv file containing a data frame
@param chunkSize the number of rows that each chunk should contain
@param ... parameters passed to read.csv() function
Usage:
$initialize((data.frame or character) df, (character) filePath, (numeric) chunkSize, 
      (parameters passed to read.csv()) ...)}

\item{\code{createIndicies()}}{This methods creates chunking indices from the current data in the DF field
Usage:
$createIndicies()}

\item{\code{createMetaData(df)}}{The createMetaData() method is not intended for the user. It is used to create the
  meta data for a new object in the h5MEMDF object.
  @param df data frame to be written to memory
  Usage:
  $createMetaData((data.frame) df)}

\item{\code{readChunk(chunkNum)}}{The readChunk() method reads a chunk denoted by chunkNum from memory into R.
  @param chunkNum numeric number of chunk to be read back into R.
  Usage:
  $readChunk((numeric (chunkNum)))}

\item{\code{readTable()}}{The readTable() method allows the user to either read a list of chunks as
  a data frame from memory or read the whole data as a table
  @param: chunkNums the vector of chunks to be read back to R.
  Usage:
  $readTable((numeric) (chunkNums))}

\item{\code{updateMetaData(df)}}{The updateMetaData() function updates the meta data in the h5MEMDF object with any new information
  form data to be appended to the current data set.
  @param df data frame or character with path to cssv file containing data frame with data to be used
          to update the h5MEMDF object.
  Usage:
  $updateMetaData((data.frame or character df))}

\item{\code{writeDataFrame()}}{The writeDataFrame() method writes the data frame to memory and populates the ptrs field in the 
  h5MEMDF object. This function is not intended for the user.
  Usage:
  $writeDataFrame()}
}}
\section{Methods in the h5MEMDF object}{

\itemize{
 \item h5MEMDF$new() creates a new h5MEMDF object. Users should use the functions ?newH5MEMDF().
 \item h5MEMDF$createH5DF(df, chunkSize, ...) populates a h5MEMDF object with data from
a data frame or csv file containing a data frame df. It writes the meta data to the h5MEMDF object
and the dataset to a h5 file. Users should use the functions ?newH5MEMDF().
\itemize{
         \item df a data frame or path to a csv file containing a data frame
         \item chunkSize the number of rows that will be written per chunk
         \item ... arguments that will be passed to the read.csv() function
}
\item h5MEMDF$append(df, ...) appends a data frame to the current h5 file and updates the meta data
in the file and on the object
\itemize{
         \item df a data frame or path to a csv file containing a data frame
         \item ... arguments that will be passed to the read.csv() function
}
\item h5MEMDF$readChunk(chunkNum) reads chunkNum from the h5MEMDF object returning a data frame chunk.
\itemize{
         \item chunkNum numeric number of the chunk to be returned
}
\item h5MEMDF$createH5DF(filePath) creates a h5DF object from the h5MEMDF object writing the data to file
provided by filePath.
\itemize{
         \item filePath character denoting location for where the h5 file should be written.
}
}
}

\section{Fields in the h5MEMDF object}{

These are the fields in the h5MEMDF object, they are not to be directly modified by the user but can
be accessed by h5MEMDF$fieldName.

\itemize{
\item nChunks: The number of chunks in the h5MEMDF object
\item ptrs: A list of pointers to each of the chunks in the data frame
\item colNames: The column names in the submitted data frame
\item colClasses: The classes of the submitted data frame
\item nrows: The number of rows in the data frame
\item ncols: The number of columns in the data frame
\item nfactors: The number of factor columns in the h5MEMDF object
\item factors: A list containing the factor levels for each factor in the data frame
\item chunkSize: The number of rows each chunk will contain
\item DF: For internal use when manipulating the data frame
\item oldNChunks: For internal use.
}
}

